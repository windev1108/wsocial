// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  nickname      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  background    String?
  gender        Gender?
  facebook      String?
  instagram     String?
  twitter       String?
  linkedin      String?
  phone         String?
  website       String?
  liveAt        String?
  birthday      DateTime?

  accounts Account[]
  sessions Session[]

  notificationsTo   Notification[] @relation("Notifications_to")
  notificationsFrom Notification[] @relation("Notifications_from")

  posts    Post[]
  comments Comment[]

  likesPost    Post[]    @relation("like_post")
  likeComments Comment[] @relation("likes_comment")
  replyToUser  Comment[] @relation("replyTo_User")
  followers    User[]    @relation("follows")
  followings   User[]    @relation("follows")

  friends          User[]                    @relation("UserFriends")
  symmetricFriends User[]                    @relation("UserFriends")
  messages         Message[]
  conversations    Conversation[]

  @@fulltext([name, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String @id @default(cuid())
  toUserId  String
  fromUsers User[] @relation("Notifications_from")
  toUser    User   @relation("Notifications_to", fields: [toUserId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type   TypeNotification

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([toUserId])
  @@index([postId])
}

enum TypeNotification {
  ADD_FRIEND
  FOLLOW_USER
  SHARE_POST
  LIKE_POST
  LIKE_COMMENT
  COMMENT_POST
  COMMENT_REPLY
}

model Post {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  viewer    Viewer
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  activity  Activity
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  files     File[]    @relation("post_files")
  likes     User[]    @relation("like_post")
  comments  Comment[]

  postShared    Post[]         @relation("post_shares")
  postSharedOf  Post[]         @relation("post_shares")
  notifications Notification[]

  @@index([authorId])
}

enum Activity {
  CREATED_POST
  UPDATE_AVATAR
  UPDATE_BACKGROUND
}

enum Viewer {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model File {
  id        String   @id @default(cuid())
  postId    String?
  url       String
  commentId String?  @unique
  publicId  String   @unique
  type      String
  post      Post?    @relation("post_files", fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation("comment_file", fields: [commentId], references: [id], onDelete: Cascade)
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?

  @@index([postId])
  @@index([commentId])
  @@index([messageId])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  file      File?    @relation("comment_file")

  replyToUser User?   @relation("replyTo_User", fields: [replyUserId], references: [id], onDelete: Cascade)
  replyUserId String?

  likes        User[]    @relation("likes_comment")
  childComment Comment[] @relation("child_Comments")
  commentOf    Comment[] @relation("child_Comments")

  @@index([userId])
  @@index([postId])
  @@index([replyUserId])
}

model Conversation {
  id              String                    @id @default(cuid())
  participants    User[]
  messages        Message[]                 @relation("conversationMessages")
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}


model Message {
  id             String        @id @default(cuid())
  conversation   Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  conversationId String
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  content           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  files           File[]
}
