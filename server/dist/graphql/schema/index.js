"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
var typeDefs = (0, apollo_server_express_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type User {\n    id: ID\n    name: String\n    nickname: String\n    email: String\n    image: String\n    background: String\n    birthday: String\n    phone: String\n    gender: Gender\n    website: String\n    liveAt: String\n    facebook: String\n    instagram: String\n    twitter: String\n    linkedin: String\n    posts(isMySelf: Boolean, isFriend: Boolean): [Post]\n    friends: [User]\n    notificationsFrom: [Notification]\n    notificationsTo: [Notification]\n    notFriends: [User]\n    isSendAddFriend: Boolean\n    isReceiveAddFriend: Boolean\n    isMySelf: Boolean\n    isFriend: Boolean\n    isFollowing: Boolean\n    followers: [User]\n    followings: [User]\n    isOnline: Boolean\n    lastTime: String\n    _count: CountUser\n  }\n\n  type CountUser {\n    followers: Int\n    followings: Int\n    messages: Int\n  }\n\n  type Post {\n    id: ID\n    viewer: String\n    content: String\n    files: [File]\n    likes: [User]\n    comments: [Comment]\n    authorId: String\n    author: User\n    activity: Activity\n    postSharedOf: postSharedOf\n    createdAt: String\n    updatedAt: String\n    _count: CountPost\n  }\n\n  type postSharedOf {\n    id: ID\n    viewer: String\n    content: String\n    files: [File]\n    author: User\n    activity: Activity\n    postSharedOf: Post\n    updatedAt: String\n  }\n\n  type File {\n    id: ID\n    postId: String\n    url: String\n    type: String\n    publicId: String\n  }\n\n  input PostInput {\n    viewer: String\n    content: String\n    activity: Activity\n    files: [FileInput]\n    postIdShared: String\n  }\n\n\n  input UserInput {\n    name: String\n    email: String\n    image: String\n    nickname: String\n    background: String\n    gender: Gender\n    facebook: String\n    instagram: String\n    twitter: String\n    linkedin: String\n    phone: String\n    website: String\n    liveAt: String\n    birthday: String\n  }\n\n  enum Gender {\n    MALE\n    FEMALE\n    OTHER\n  }\n\n  input FileInput {\n    url: String\n    type: String\n    publicId: String\n  }\n\n  type Notification {\n    id: String\n    fromUsers: [User]\n    toUser: User\n    post: Post\n    postId: String\n    type: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  input NotificationInput {\n    toUserId: String\n    type: String\n    postId: String\n  }\n\n  input CommentInput {\n    postId: String\n    file: FileInput\n    content: String\n    parentId: String\n    replyUserId: String\n  }\n\n  input MessageInput {\n    content: String\n    files: [FileInput]\n    conversationId: String\n    toUserId: String\n  }\n\n  input FileInput {\n    publicId: String\n    url: String\n    type: String\n  }\n\n  enum Activity {\n    CREATED_POST\n    UPDATE_AVATAR\n    UPDATE_BACKGROUND\n  }\n\n  enum Gender {\n    MALE\n    FEMALE\n    OTHER\n  }\n\n  type Comment {\n    id: String\n    postId: String\n    userId: String\n    post: Post\n    user: User\n    file: File\n    fileId: String\n    childComment: [Comment]\n    commentOf: [Comment]\n    likes: [User]\n    replyToUser: User\n    replyUserId: String\n    content: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  type CountPost {\n    comments: Int\n    postShared: Int\n  }\n\n  type Conversation {\n    id: String\n    latestMessage: Message\n    messages: [Message]\n    participants: [User]\n    user: User\n    _count: CountMessage\n    updatedAt: String\n  }\n\n  type CountMessage {\n    messages: Int\n    messagesNotSeen: Int\n  }\n\n\n\n  type Message {\n    id: String\n    content: String\n    files: [File]\n    sender: User\n    senderId: String\n    conversation: Conversation\n    createdAt: String\n    updatedAt: String\n  }\n\n\n\n  \n  type ConversationDeletedResponse {\n    id: String\n  }\n\n  type ConversationUpdatedSubscriptionPayload {\n    conversation: Conversation\n    addedUserIds: [String]\n    removedUserIds: [String]\n  }\n\n  # ROOT TYPE\n  type Query {\n    getUsers: [User]\n    getUserById(id: ID!): User\n    getPosts(userId: String, viewer: String, take: Int): [Post]\n    getPostById(id: ID!): Post\n    conversations: [Conversation]\n    findConversation(userId: ID!): Conversation\n  }\n\n  # MUTATION TYPE\n  type Mutation {\n    updateUser(user: UserInput): GraphQLResponse\n\n    createPost(post: PostInput): GraphQLResponse\n    updatePost(id: ID!, post: PostInput): GraphQLResponse\n    deletePost(id: ID!): GraphQLResponse\n\n    # like post\n    toggleLikePost(\n      postId: ID!\n      authorId: ID!\n      isLiked: Boolean\n    ): GraphQLResponse\n\n    # like comment\n    toggleLikeComment(\n      commentId: ID!\n      postId: ID\n      isLiked: Boolean\n      authorId: ID!\n    ): GraphQLResponse\n\n    # friendship\n    addFriendship(userIdB: String): GraphQLResponse\n    removeFriendship(userIdB: String): GraphQLResponse\n\n    # follower\n    followUser(followingId: String): GraphQLResponse\n    unFollowUser(followingId: String): GraphQLResponse\n\n    # notifications\n    createNotification(notification: NotificationInput): GraphQLResponse\n    deleteNotification(id: ID, userId: ID): GraphQLResponse\n\n    # comments\n    createComment(comment: CommentInput, authorId: ID): GraphQLResponse\n    deleteComment(id: ID): GraphQLResponse\n\n    # message\n    sendMessage(message: MessageInput): Message\n  }\n\n  \n  type GraphQLResponse {\n    success: Boolean\n    message: String\n  }\n"], ["\n  type User {\n    id: ID\n    name: String\n    nickname: String\n    email: String\n    image: String\n    background: String\n    birthday: String\n    phone: String\n    gender: Gender\n    website: String\n    liveAt: String\n    facebook: String\n    instagram: String\n    twitter: String\n    linkedin: String\n    posts(isMySelf: Boolean, isFriend: Boolean): [Post]\n    friends: [User]\n    notificationsFrom: [Notification]\n    notificationsTo: [Notification]\n    notFriends: [User]\n    isSendAddFriend: Boolean\n    isReceiveAddFriend: Boolean\n    isMySelf: Boolean\n    isFriend: Boolean\n    isFollowing: Boolean\n    followers: [User]\n    followings: [User]\n    isOnline: Boolean\n    lastTime: String\n    _count: CountUser\n  }\n\n  type CountUser {\n    followers: Int\n    followings: Int\n    messages: Int\n  }\n\n  type Post {\n    id: ID\n    viewer: String\n    content: String\n    files: [File]\n    likes: [User]\n    comments: [Comment]\n    authorId: String\n    author: User\n    activity: Activity\n    postSharedOf: postSharedOf\n    createdAt: String\n    updatedAt: String\n    _count: CountPost\n  }\n\n  type postSharedOf {\n    id: ID\n    viewer: String\n    content: String\n    files: [File]\n    author: User\n    activity: Activity\n    postSharedOf: Post\n    updatedAt: String\n  }\n\n  type File {\n    id: ID\n    postId: String\n    url: String\n    type: String\n    publicId: String\n  }\n\n  input PostInput {\n    viewer: String\n    content: String\n    activity: Activity\n    files: [FileInput]\n    postIdShared: String\n  }\n\n\n  input UserInput {\n    name: String\n    email: String\n    image: String\n    nickname: String\n    background: String\n    gender: Gender\n    facebook: String\n    instagram: String\n    twitter: String\n    linkedin: String\n    phone: String\n    website: String\n    liveAt: String\n    birthday: String\n  }\n\n  enum Gender {\n    MALE\n    FEMALE\n    OTHER\n  }\n\n  input FileInput {\n    url: String\n    type: String\n    publicId: String\n  }\n\n  type Notification {\n    id: String\n    fromUsers: [User]\n    toUser: User\n    post: Post\n    postId: String\n    type: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  input NotificationInput {\n    toUserId: String\n    type: String\n    postId: String\n  }\n\n  input CommentInput {\n    postId: String\n    file: FileInput\n    content: String\n    parentId: String\n    replyUserId: String\n  }\n\n  input MessageInput {\n    content: String\n    files: [FileInput]\n    conversationId: String\n    toUserId: String\n  }\n\n  input FileInput {\n    publicId: String\n    url: String\n    type: String\n  }\n\n  enum Activity {\n    CREATED_POST\n    UPDATE_AVATAR\n    UPDATE_BACKGROUND\n  }\n\n  enum Gender {\n    MALE\n    FEMALE\n    OTHER\n  }\n\n  type Comment {\n    id: String\n    postId: String\n    userId: String\n    post: Post\n    user: User\n    file: File\n    fileId: String\n    childComment: [Comment]\n    commentOf: [Comment]\n    likes: [User]\n    replyToUser: User\n    replyUserId: String\n    content: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  type CountPost {\n    comments: Int\n    postShared: Int\n  }\n\n  type Conversation {\n    id: String\n    latestMessage: Message\n    messages: [Message]\n    participants: [User]\n    user: User\n    _count: CountMessage\n    updatedAt: String\n  }\n\n  type CountMessage {\n    messages: Int\n    messagesNotSeen: Int\n  }\n\n\n\n  type Message {\n    id: String\n    content: String\n    files: [File]\n    sender: User\n    senderId: String\n    conversation: Conversation\n    createdAt: String\n    updatedAt: String\n  }\n\n\n\n  \n  type ConversationDeletedResponse {\n    id: String\n  }\n\n  type ConversationUpdatedSubscriptionPayload {\n    conversation: Conversation\n    addedUserIds: [String]\n    removedUserIds: [String]\n  }\n\n  # ROOT TYPE\n  type Query {\n    getUsers: [User]\n    getUserById(id: ID!): User\n    getPosts(userId: String, viewer: String, take: Int): [Post]\n    getPostById(id: ID!): Post\n    conversations: [Conversation]\n    findConversation(userId: ID!): Conversation\n  }\n\n  # MUTATION TYPE\n  type Mutation {\n    updateUser(user: UserInput): GraphQLResponse\n\n    createPost(post: PostInput): GraphQLResponse\n    updatePost(id: ID!, post: PostInput): GraphQLResponse\n    deletePost(id: ID!): GraphQLResponse\n\n    # like post\n    toggleLikePost(\n      postId: ID!\n      authorId: ID!\n      isLiked: Boolean\n    ): GraphQLResponse\n\n    # like comment\n    toggleLikeComment(\n      commentId: ID!\n      postId: ID\n      isLiked: Boolean\n      authorId: ID!\n    ): GraphQLResponse\n\n    # friendship\n    addFriendship(userIdB: String): GraphQLResponse\n    removeFriendship(userIdB: String): GraphQLResponse\n\n    # follower\n    followUser(followingId: String): GraphQLResponse\n    unFollowUser(followingId: String): GraphQLResponse\n\n    # notifications\n    createNotification(notification: NotificationInput): GraphQLResponse\n    deleteNotification(id: ID, userId: ID): GraphQLResponse\n\n    # comments\n    createComment(comment: CommentInput, authorId: ID): GraphQLResponse\n    deleteComment(id: ID): GraphQLResponse\n\n    # message\n    sendMessage(message: MessageInput): Message\n  }\n\n  \n  type GraphQLResponse {\n    success: Boolean\n    message: String\n  }\n"])));
exports.default = typeDefs;
var templateObject_1;
